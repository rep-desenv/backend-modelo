#comandos importantes:

npm init -y
npm install typescript ts-node @types/node --save-dev
npx tsc --init
npm install prisma --save-dev


npm install -D prisma@latest            => instalar prisma
npm install @prisma/client@latest       => instalar prisma client
npx prisma init                         => utilizado para inicializar o prisma (criando a estutura, pasta ./prima e arquivo schema.prisma)
npx prisma migrate dev --name init      => executar migrate sempre que o modelo for alterado ./prisma/schema.prisma
npx prisma generate --sql               => gerar o client prisma (schema e comandos sql da pasta ./prisma/sql cada vez que for criado uma nova consulta)
npx ts-node index.ts                    => executar script



prisma generate: gera o código de acesso ao banco de dados a partir do arquivo de modelo do Prisma.
prisma introspect: examina o banco de dados e gera o arquivo de modelo do Prisma a partir dele.
prisma migrate save: cria uma nova migração a partir do arquivo de modelo atual do Prisma.
prisma migrate up: aplica as migrações pendentes ao banco de dados.
prisma migrate down: reverte as últimas migrações aplicadas ao banco de dados.
prisma reset: remove todos os dados do banco de dados e aplica novamente todas as migrações.
prisma playground: inicia o playground do Prisma, um ambiente interativo para explorar e testar consultas.


#criando uma api rest com TypeScript, Prisma e MySQL:

https://medium.com/@alfiannrzky0/creating-a-rest-api-with-express-js-typescript-and-prisma-orm-35445481a19b
https://dev.to/osalumense/validating-request-data-in-expressjs-using-zod-a-comprehensive-guide-3a0j
https://blog.cubos.academy/typscript/#
https://medium.com/@gabrielorlando_12302/desenvolvendo-uma-aplica%C3%A7%C3%A3o-simples-com-express-e-typescript-818ad9363a12


#Tipos de dados para TypeScript:

Number: Para representar números, sejam eles inteiros ou de ponto flutuante.
String: Para representar sequências de caracteres.
Boolean: Para representar valores true ou false.
Null e undefined: Para representar valores nulos ou não definidos.
Any: Para representar qualquer tipo de dado.
Void: Para representar a ausência de um valor.
Object: Para representar um tipo de objeto.
Array: Para representar um array de valores de um determinado tipo.
Tuple: Para representar uma matriz com um número fixo de elementos, em que cada elemento pode ter um tipo diferente.
Enum: Para representar um conjunto de valores nomeados.
Union Types: Para representar um tipo que pode ter um dos vários tipos possíveis.
Intersection Types: Para representar um tipo que é a combinação de dois ou mais tipos diferentes.
Type Aliases: Para criar um novo nome para um tipo existente.